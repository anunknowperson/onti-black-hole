[gd_scene load_steps=24 format=3 uid="uid://cpy7dngbirqe5"]

[ext_resource type="Script" path="res://Solution.gd" id="1_40nr5"]
[ext_resource type="Script" path="res://scenes/Space/scripts/Space.gd" id="1_lasyx"]
[ext_resource type="PackedScene" uid="uid://bapamve6ios88" path="res://scenes/Space/objects/star/star.tscn" id="2_2xiul"]
[ext_resource type="Script" path="res://scenes/Space/objects/subviewport/scripts/SubViewport.gd" id="3_oyg42"]
[ext_resource type="Environment" uid="uid://2elbjkak7ifi" path="res://main_environment.tres" id="3_w5e00"]
[ext_resource type="Script" path="res://scenes/Space/objects/matter/scripts/Reflection.gd" id="4_8pr7w"]
[ext_resource type="Script" path="res://scenes/Space/objects/camera/scripts/Camera3D.gd" id="6_pqlxl"]

[sub_resource type="Environment" id="Environment_lvxsg"]
background_energy_multiplier = 0.0

[sub_resource type="World3D" id="World3D_07pns"]
environment = SubResource("Environment_lvxsg")

[sub_resource type="Shader" id="Shader_v3b2n"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded;



varying vec3 normal;

void vertex() {
	
	
	normal = NORMAL;
}






void fragment() {

	if (dot(normal, vec3(0.0, 1.0, 0.0)) < 0.5){
		discard;
	}
	
	ALBEDO = vec3(0.0, 0.0, 0.0) ;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_slgn7"]
render_priority = 0
shader = SubResource("Shader_v3b2n")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_2rqxh"]
shading_mode = 0
albedo_color = Color(1, 0, 0, 1)

[sub_resource type="PlaneMesh" id="PlaneMesh_qph1u"]
size = Vector2(100, 100)

[sub_resource type="Shader" id="Shader_as0n7"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


varying vec3 normal;



void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
	
	normal = NORMAL;
	
	vec4 worldPosition = MODEL_MATRIX * vec4(VERTEX, 1.0);
	
	if (worldPosition.y < -1.0) {
		normal = -normal;
	}
}




vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}





void fragment() {
	if (dot(normal, vec3(0.0, 1.0, 0.0)) < 0.5){
		discard;
	}
	
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	ALPHA *= albedo.a * albedo_tex.a;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_jh0lq"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_lpxo0"]
width = 1024
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_jh0lq")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_rvf3y"]
render_priority = 1
shader = SubResource("Shader_as0n7")
shader_parameter/albedo = Color(1, 1, 1, 0.368627)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.1, 0.1, 0.1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = SubResource("NoiseTexture2D_lpxo0")

[sub_resource type="Shader" id="Shader_n4rgl"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded;

uniform sampler2D mask;

void vertex() {
	
}


void fragment() {
	if (texture(mask, SCREEN_UV).rgb != vec3(1.0, 0.0, 0.0)){
		discard;
	}
	
	ALBEDO = vec3(0.0, 0.0, 0.0);
}
"

[sub_resource type="ViewportTexture" id="ViewportTexture_jalbr"]
viewport_path = NodePath("SubViewport")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_c7weg"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_n4rgl")
shader_parameter/mask = SubResource("ViewportTexture_jalbr")

[sub_resource type="PlaneMesh" id="PlaneMesh_vir3j"]
size = Vector2(100, 100)

[sub_resource type="ArrayMesh" id="ArrayMesh_t1tb5"]
_surfaces = [{
"aabb": AABB(-5000, 0, -5000, 10000, 1e-05, 10000),
"attribute_data": PackedByteArray(115, 104, 1, 63, 26, 47, 253, 62, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 63, 115, 104, 1, 63, 26, 47, 253, 62, 0, 0, 128, 63, 0, 0, 128, 63, 115, 104, 1, 63, 1, 0, 0, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 128, 63, 114, 104, 1, 63, 115, 104, 1, 63, 115, 104, 1, 63, 1, 0, 0, 63, 0, 0, 128, 63, 0, 0, 128, 63, 114, 104, 1, 63, 115, 104, 1, 63, 114, 104, 1, 63, 115, 104, 1, 63, 0, 0, 0, 0, 0, 0, 128, 63, 169, 56, 255, 62, 223, 202, 1, 63, 169, 56, 255, 62, 223, 202, 1, 63, 0, 0, 0, 0, 0, 0, 128, 63, 27, 47, 253, 62, 114, 104, 1, 63, 25, 47, 253, 62, 115, 104, 1, 63, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 114, 104, 1, 63, 27, 47, 253, 62, 25, 47, 253, 62, 115, 104, 1, 63, 0, 0, 0, 0, 0, 0, 0, 0, 84, 58, 253, 62, 199, 5, 0, 63, 68, 5, 0, 63, 156, 57, 253, 62, 46, 68, 253, 62, 28, 68, 253, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 104, 1, 63, 27, 47, 253, 62, 68, 5, 0, 63, 156, 57, 253, 62, 84, 58, 253, 62, 199, 5, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 46, 68, 253, 62, 28, 68, 253, 62),
"format": 23,
"primitive": 3,
"vertex_count": 36,
"vertex_data": PackedByteArray(128, 255, 91, 66, 0, 0, 0, 0, 128, 0, 92, 194, 255, 127, 255, 255, 254, 255, 255, 191, 0, 64, 156, 69, 0, 0, 0, 0, 2, 64, 156, 197, 255, 127, 255, 255, 255, 255, 255, 191, 0, 64, 156, 69, 0, 0, 0, 0, 0, 64, 156, 69, 255, 127, 255, 255, 255, 255, 255, 191, 128, 255, 91, 66, 0, 0, 0, 0, 128, 0, 92, 194, 255, 127, 255, 255, 254, 255, 255, 191, 0, 64, 156, 69, 0, 0, 0, 0, 0, 64, 156, 69, 255, 127, 255, 255, 255, 255, 255, 191, 0, 0, 92, 66, 0, 0, 0, 0, 0, 0, 0, 0, 255, 127, 255, 255, 254, 255, 255, 191, 0, 64, 156, 69, 0, 0, 0, 0, 0, 64, 156, 69, 255, 127, 255, 255, 255, 255, 255, 191, 2, 64, 156, 197, 0, 0, 0, 0, 0, 64, 156, 69, 255, 127, 255, 255, 222, 255, 255, 191, 128, 255, 91, 66, 0, 0, 0, 0, 128, 255, 91, 66, 255, 127, 255, 255, 226, 248, 255, 191, 0, 0, 92, 66, 0, 0, 0, 0, 0, 0, 0, 0, 255, 127, 255, 255, 254, 255, 255, 191, 0, 64, 156, 69, 0, 0, 0, 0, 0, 64, 156, 69, 255, 127, 255, 255, 255, 255, 255, 191, 128, 255, 91, 66, 0, 0, 0, 0, 128, 255, 91, 66, 255, 127, 255, 255, 226, 248, 255, 191, 128, 255, 91, 66, 0, 0, 0, 0, 128, 255, 91, 66, 255, 127, 255, 255, 226, 248, 255, 191, 2, 64, 156, 197, 0, 0, 0, 0, 0, 64, 156, 69, 255, 127, 255, 255, 222, 255, 255, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 66, 255, 127, 255, 255, 91, 232, 255, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 66, 255, 127, 255, 255, 91, 232, 255, 191, 2, 64, 156, 197, 0, 0, 0, 0, 0, 64, 156, 69, 255, 127, 255, 255, 222, 255, 255, 191, 128, 0, 92, 194, 0, 0, 0, 0, 128, 255, 91, 66, 255, 127, 255, 255, 255, 255, 76, 203, 0, 0, 92, 194, 0, 0, 0, 0, 0, 0, 92, 66, 255, 127, 255, 255, 255, 255, 88, 192, 0, 64, 156, 197, 0, 0, 0, 0, 0, 64, 156, 69, 255, 127, 255, 255, 255, 255, 255, 191, 0, 64, 156, 197, 0, 0, 0, 0, 0, 64, 156, 197, 255, 127, 255, 255, 255, 255, 255, 191, 0, 64, 156, 197, 0, 0, 0, 0, 0, 64, 156, 197, 255, 127, 255, 255, 255, 255, 255, 191, 0, 64, 156, 69, 0, 0, 0, 0, 0, 64, 156, 197, 255, 127, 255, 255, 255, 255, 255, 191, 0, 0, 92, 66, 0, 0, 0, 0, 0, 0, 92, 194, 255, 127, 255, 255, 101, 255, 255, 191, 0, 0, 92, 194, 0, 0, 0, 0, 0, 0, 92, 66, 255, 127, 255, 255, 255, 255, 88, 192, 0, 64, 156, 197, 0, 0, 0, 0, 0, 64, 156, 197, 255, 127, 255, 255, 255, 255, 255, 191, 0, 0, 92, 194, 0, 0, 0, 0, 0, 0, 0, 0, 255, 127, 255, 255, 255, 255, 255, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 194, 255, 127, 255, 255, 47, 254, 255, 191, 0, 0, 92, 194, 0, 0, 0, 0, 0, 0, 92, 194, 255, 127, 255, 255, 242, 255, 255, 191, 0, 64, 156, 197, 0, 0, 0, 0, 0, 64, 156, 197, 255, 127, 255, 255, 255, 255, 255, 191, 0, 64, 156, 197, 0, 0, 0, 0, 0, 64, 156, 197, 255, 127, 255, 255, 255, 255, 255, 191, 0, 0, 92, 66, 0, 0, 0, 0, 0, 0, 92, 194, 255, 127, 255, 255, 101, 255, 255, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 194, 255, 127, 255, 255, 47, 254, 255, 191, 0, 0, 92, 194, 0, 0, 0, 0, 0, 0, 0, 0, 255, 127, 255, 255, 255, 255, 255, 192, 0, 64, 156, 197, 0, 0, 0, 0, 0, 64, 156, 197, 255, 127, 255, 255, 255, 255, 255, 191, 0, 0, 92, 194, 0, 0, 0, 0, 0, 0, 92, 194, 255, 127, 255, 255, 242, 255, 255, 191)
}]

[sub_resource type="BoxShape3D" id="BoxShape3D_h8i61"]
size = Vector3(110, 50, 110)

[node name="Space" type="Node3D"]
script = ExtResource("1_lasyx")
matter_node_path = NodePath("Matter")
star = ExtResource("2_2xiul")

[node name="SubViewport" type="SubViewport" parent="."]
own_world_3d = true
world_3d = SubResource("World3D_07pns")
size = Vector2i(1065, 622)
render_target_update_mode = 4
script = ExtResource("3_oyg42")
camera_path = NodePath("../Camera3D")

[node name="Camera3D" type="Camera3D" parent="SubViewport"]
transform = Transform3D(-0.735501, 0.366069, -0.570116, 0, 0.84147, 0.540304, 0.677524, 0.397394, -0.618902, -51.9875, 21.1372, -62.8544)
fov = 70.01

[node name="Matter" type="CSGBox3D" parent="SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -50, 0)
material_override = SubResource("ShaderMaterial_slgn7")
size = Vector3(100, 100, 100)
script = ExtResource("4_8pr7w")
node_to_reflect = NodePath("../../Matter")

[node name="Black Hole" type="MeshInstance3D" parent="SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.01, 0)
material_override = SubResource("StandardMaterial3D_2rqxh")
mesh = SubResource("PlaneMesh_qph1u")
skeleton = NodePath("../Matter")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = ExtResource("3_w5e00")

[node name="Matter" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -50, 0)
material_override = SubResource("ShaderMaterial_rvf3y")
use_collision = true
size = Vector3(110, 100, 110)

[node name="Black Hole" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.1, 0)
material_override = SubResource("ShaderMaterial_c7weg")
mesh = SubResource("PlaneMesh_vir3j")
skeleton = NodePath("../SubViewport/Matter")

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(0.707107, -0.40558, 0.579228, 0, 0.819152, 0.573576, -0.707107, -0.40558, 0.579228, 40, 20, 40)
script = ExtResource("6_pqlxl")

[node name="Plane" type="MeshInstance3D" parent="."]
material_override = SubResource("ShaderMaterial_rvf3y")
mesh = SubResource("ArrayMesh_t1tb5")

[node name="Solution" type="Node3D" parent="."]
script = ExtResource("1_40nr5")

[node name="Area3D" type="Area3D" parent="."]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Area3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -30, 0)
shape = SubResource("BoxShape3D_h8i61")

[node name="Label" type="Label" parent="."]
anchors_preset = -1
anchor_left = 0.1
anchor_top = 0.1
anchor_right = 0.95
anchor_bottom = 0.95
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 50
text = "Score: 0"
horizontal_alignment = 2

[connection signal="body_entered" from="Area3D" to="." method="_on_area_3d_body_entered"]
