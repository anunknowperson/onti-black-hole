[gd_scene load_steps=9 format=3 uid="uid://bapamve6ios88"]

[ext_resource type="Script" path="res://scenes/Space/objects/star/scripts/Star.gd" id="1_0w4ef"]
[ext_resource type="Material" uid="uid://gb4lobkqyjw3" path="res://scenes/Space/objects/star/materials/bad_star.material" id="2_31tef"]
[ext_resource type="Texture2D" uid="uid://bdv5t21mxnxrv" path="res://scenes/Space/objects/star/textures/star.png" id="3_omviu"]

[sub_resource type="SphereShape3D" id="SphereShape3D_c5wm6"]

[sub_resource type="QuadMesh" id="QuadMesh_dwj04"]

[sub_resource type="Shader" id="Shader_toq1d"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

varying vec3 wPos;

void vertex() {
	
	
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	MODELVIEW_MATRIX = VIEW_MATRIX * mat4(INV_VIEW_MATRIX[0], INV_VIEW_MATRIX[1], INV_VIEW_MATRIX[2], MODEL_MATRIX[3]);
	MODELVIEW_NORMAL_MATRIX = mat3(MODELVIEW_MATRIX);
	
	wPos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
	
	
}






void fragment() {
	if (wPos.y < 0.0) {
		discard;
	}
	
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	ALPHA *= albedo.a * albedo_tex.a;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_27i2l"]
render_priority = 0
shader = SubResource("Shader_toq1d")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = ExtResource("3_omviu")

[sub_resource type="QuadMesh" id="QuadMesh_cjbw0"]
size = Vector2(0.4, 0.5)

[node name="Star" type="RigidBody3D" groups=["star"]]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.821906, 1.33297, -4.85957)
can_sleep = false
script = ExtResource("1_0w4ef")
size = 2.0

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("SphereShape3D_c5wm6")

[node name="Ring" type="MeshInstance3D" parent="."]
material_override = ExtResource("2_31tef")
mesh = SubResource("QuadMesh_dwj04")

[node name="Core" type="MeshInstance3D" parent="."]
material_override = SubResource("ShaderMaterial_27i2l")
mesh = SubResource("QuadMesh_cjbw0")
